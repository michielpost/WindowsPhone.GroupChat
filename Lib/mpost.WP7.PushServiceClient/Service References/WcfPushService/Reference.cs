//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18010
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace mpost.WP7.PushServiceClient.WcfPushService {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClientInfo", Namespace="http://schemas.datacontract.org/2004/07/PushNotificationHost.Contracts")]
    public partial class ClientInfo : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ChannelNameField;
        
        private string DisplayNameField;
        
        private string UriField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ChannelName {
            get {
                return this.ChannelNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ChannelNameField, value) != true)) {
                    this.ChannelNameField = value;
                    this.RaisePropertyChanged("ChannelName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Uri {
            get {
                return this.UriField;
            }
            set {
                if ((object.ReferenceEquals(this.UriField, value) != true)) {
                    this.UriField = value;
                    this.RaisePropertyChanged("Uri");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfPushService.IPush")]
    public interface IPush {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPush/Ping", ReplyAction="http://tempuri.org/IPush/PingResponse")]
        System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState);
        
        bool EndPing(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPush/Test", ReplyAction="http://tempuri.org/IPush/TestResponse")]
        System.IAsyncResult BeginTest(string uri, System.AsyncCallback callback, object asyncState);
        
        void EndTest(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPush/Connect", ReplyAction="http://tempuri.org/IPush/ConnectResponse")]
        System.IAsyncResult BeginConnect(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, string application, int type, bool availableRandom, System.AsyncCallback callback, object asyncState);
        
        void EndConnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPush/Disconnect", ReplyAction="http://tempuri.org/IPush/DisconnectResponse")]
        System.IAsyncResult BeginDisconnect(string uri, System.AsyncCallback callback, object asyncState);
        
        void EndDisconnect(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPush/CreateRandom", ReplyAction="http://tempuri.org/IPush/CreateRandomResponse")]
        System.IAsyncResult BeginCreateRandom(string uri, System.AsyncCallback callback, object asyncState);
        
        bool EndCreateRandom(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPush/JoinChannel", ReplyAction="http://tempuri.org/IPush/JoinChannelResponse")]
        System.IAsyncResult BeginJoinChannel(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, System.AsyncCallback callback, object asyncState);
        
        bool EndJoinChannel(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPush/SendMessage", ReplyAction="http://tempuri.org/IPush/SendMessageResponse")]
        System.IAsyncResult BeginSendMessage(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, string msg, System.AsyncCallback callback, object asyncState);
        
        bool EndSendMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IPush/GetLastMessages", ReplyAction="http://tempuri.org/IPush/GetLastMessagesResponse")]
        System.IAsyncResult BeginGetLastMessages(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<string> EndGetLastMessages(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IPushChannel : mpost.WP7.PushServiceClient.WcfPushService.IPush, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public PingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class CreateRandomCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public CreateRandomCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class JoinChannelCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public JoinChannelCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SendMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SendMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLastMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLastMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<string> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<string>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class PushClient : System.ServiceModel.ClientBase<mpost.WP7.PushServiceClient.WcfPushService.IPush>, mpost.WP7.PushServiceClient.WcfPushService.IPush {
        
        private BeginOperationDelegate onBeginPingDelegate;
        
        private EndOperationDelegate onEndPingDelegate;
        
        private System.Threading.SendOrPostCallback onPingCompletedDelegate;
        
        private BeginOperationDelegate onBeginTestDelegate;
        
        private EndOperationDelegate onEndTestDelegate;
        
        private System.Threading.SendOrPostCallback onTestCompletedDelegate;
        
        private BeginOperationDelegate onBeginConnectDelegate;
        
        private EndOperationDelegate onEndConnectDelegate;
        
        private System.Threading.SendOrPostCallback onConnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginDisconnectDelegate;
        
        private EndOperationDelegate onEndDisconnectDelegate;
        
        private System.Threading.SendOrPostCallback onDisconnectCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreateRandomDelegate;
        
        private EndOperationDelegate onEndCreateRandomDelegate;
        
        private System.Threading.SendOrPostCallback onCreateRandomCompletedDelegate;
        
        private BeginOperationDelegate onBeginJoinChannelDelegate;
        
        private EndOperationDelegate onEndJoinChannelDelegate;
        
        private System.Threading.SendOrPostCallback onJoinChannelCompletedDelegate;
        
        private BeginOperationDelegate onBeginSendMessageDelegate;
        
        private EndOperationDelegate onEndSendMessageDelegate;
        
        private System.Threading.SendOrPostCallback onSendMessageCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLastMessagesDelegate;
        
        private EndOperationDelegate onEndGetLastMessagesDelegate;
        
        private System.Threading.SendOrPostCallback onGetLastMessagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public PushClient() {
        }
        
        public PushClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public PushClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PushClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public PushClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<PingCompletedEventArgs> PingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> TestCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> ConnectCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> DisconnectCompleted;
        
        public event System.EventHandler<CreateRandomCompletedEventArgs> CreateRandomCompleted;
        
        public event System.EventHandler<JoinChannelCompletedEventArgs> JoinChannelCompleted;
        
        public event System.EventHandler<SendMessageCompletedEventArgs> SendMessageCompleted;
        
        public event System.EventHandler<GetLastMessagesCompletedEventArgs> GetLastMessagesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult mpost.WP7.PushServiceClient.WcfPushService.IPush.BeginPing(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginPing(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool mpost.WP7.PushServiceClient.WcfPushService.IPush.EndPing(System.IAsyncResult result) {
            return base.Channel.EndPing(result);
        }
        
        private System.IAsyncResult OnBeginPing(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).BeginPing(callback, asyncState);
        }
        
        private object[] OnEndPing(System.IAsyncResult result) {
            bool retVal = ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).EndPing(result);
            return new object[] {
                    retVal};
        }
        
        private void OnPingCompleted(object state) {
            if ((this.PingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.PingCompleted(this, new PingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void PingAsync() {
            this.PingAsync(null);
        }
        
        public void PingAsync(object userState) {
            if ((this.onBeginPingDelegate == null)) {
                this.onBeginPingDelegate = new BeginOperationDelegate(this.OnBeginPing);
            }
            if ((this.onEndPingDelegate == null)) {
                this.onEndPingDelegate = new EndOperationDelegate(this.OnEndPing);
            }
            if ((this.onPingCompletedDelegate == null)) {
                this.onPingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnPingCompleted);
            }
            base.InvokeAsync(this.onBeginPingDelegate, null, this.onEndPingDelegate, this.onPingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult mpost.WP7.PushServiceClient.WcfPushService.IPush.BeginTest(string uri, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginTest(uri, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void mpost.WP7.PushServiceClient.WcfPushService.IPush.EndTest(System.IAsyncResult result) {
            base.Channel.EndTest(result);
        }
        
        private System.IAsyncResult OnBeginTest(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string uri = ((string)(inValues[0]));
            return ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).BeginTest(uri, callback, asyncState);
        }
        
        private object[] OnEndTest(System.IAsyncResult result) {
            ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).EndTest(result);
            return null;
        }
        
        private void OnTestCompleted(object state) {
            if ((this.TestCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.TestCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void TestAsync(string uri) {
            this.TestAsync(uri, null);
        }
        
        public void TestAsync(string uri, object userState) {
            if ((this.onBeginTestDelegate == null)) {
                this.onBeginTestDelegate = new BeginOperationDelegate(this.OnBeginTest);
            }
            if ((this.onEndTestDelegate == null)) {
                this.onEndTestDelegate = new EndOperationDelegate(this.OnEndTest);
            }
            if ((this.onTestCompletedDelegate == null)) {
                this.onTestCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnTestCompleted);
            }
            base.InvokeAsync(this.onBeginTestDelegate, new object[] {
                        uri}, this.onEndTestDelegate, this.onTestCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult mpost.WP7.PushServiceClient.WcfPushService.IPush.BeginConnect(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, string application, int type, bool availableRandom, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginConnect(clientInfo, application, type, availableRandom, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void mpost.WP7.PushServiceClient.WcfPushService.IPush.EndConnect(System.IAsyncResult result) {
            base.Channel.EndConnect(result);
        }
        
        private System.IAsyncResult OnBeginConnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo = ((mpost.WP7.PushServiceClient.WcfPushService.ClientInfo)(inValues[0]));
            string application = ((string)(inValues[1]));
            int type = ((int)(inValues[2]));
            bool availableRandom = ((bool)(inValues[3]));
            return ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).BeginConnect(clientInfo, application, type, availableRandom, callback, asyncState);
        }
        
        private object[] OnEndConnect(System.IAsyncResult result) {
            ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).EndConnect(result);
            return null;
        }
        
        private void OnConnectCompleted(object state) {
            if ((this.ConnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ConnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ConnectAsync(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, string application, int type, bool availableRandom) {
            this.ConnectAsync(clientInfo, application, type, availableRandom, null);
        }
        
        public void ConnectAsync(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, string application, int type, bool availableRandom, object userState) {
            if ((this.onBeginConnectDelegate == null)) {
                this.onBeginConnectDelegate = new BeginOperationDelegate(this.OnBeginConnect);
            }
            if ((this.onEndConnectDelegate == null)) {
                this.onEndConnectDelegate = new EndOperationDelegate(this.OnEndConnect);
            }
            if ((this.onConnectCompletedDelegate == null)) {
                this.onConnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnConnectCompleted);
            }
            base.InvokeAsync(this.onBeginConnectDelegate, new object[] {
                        clientInfo,
                        application,
                        type,
                        availableRandom}, this.onEndConnectDelegate, this.onConnectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult mpost.WP7.PushServiceClient.WcfPushService.IPush.BeginDisconnect(string uri, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDisconnect(uri, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void mpost.WP7.PushServiceClient.WcfPushService.IPush.EndDisconnect(System.IAsyncResult result) {
            base.Channel.EndDisconnect(result);
        }
        
        private System.IAsyncResult OnBeginDisconnect(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string uri = ((string)(inValues[0]));
            return ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).BeginDisconnect(uri, callback, asyncState);
        }
        
        private object[] OnEndDisconnect(System.IAsyncResult result) {
            ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).EndDisconnect(result);
            return null;
        }
        
        private void OnDisconnectCompleted(object state) {
            if ((this.DisconnectCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DisconnectCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DisconnectAsync(string uri) {
            this.DisconnectAsync(uri, null);
        }
        
        public void DisconnectAsync(string uri, object userState) {
            if ((this.onBeginDisconnectDelegate == null)) {
                this.onBeginDisconnectDelegate = new BeginOperationDelegate(this.OnBeginDisconnect);
            }
            if ((this.onEndDisconnectDelegate == null)) {
                this.onEndDisconnectDelegate = new EndOperationDelegate(this.OnEndDisconnect);
            }
            if ((this.onDisconnectCompletedDelegate == null)) {
                this.onDisconnectCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDisconnectCompleted);
            }
            base.InvokeAsync(this.onBeginDisconnectDelegate, new object[] {
                        uri}, this.onEndDisconnectDelegate, this.onDisconnectCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult mpost.WP7.PushServiceClient.WcfPushService.IPush.BeginCreateRandom(string uri, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreateRandom(uri, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool mpost.WP7.PushServiceClient.WcfPushService.IPush.EndCreateRandom(System.IAsyncResult result) {
            return base.Channel.EndCreateRandom(result);
        }
        
        private System.IAsyncResult OnBeginCreateRandom(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string uri = ((string)(inValues[0]));
            return ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).BeginCreateRandom(uri, callback, asyncState);
        }
        
        private object[] OnEndCreateRandom(System.IAsyncResult result) {
            bool retVal = ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).EndCreateRandom(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreateRandomCompleted(object state) {
            if ((this.CreateRandomCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CreateRandomCompleted(this, new CreateRandomCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CreateRandomAsync(string uri) {
            this.CreateRandomAsync(uri, null);
        }
        
        public void CreateRandomAsync(string uri, object userState) {
            if ((this.onBeginCreateRandomDelegate == null)) {
                this.onBeginCreateRandomDelegate = new BeginOperationDelegate(this.OnBeginCreateRandom);
            }
            if ((this.onEndCreateRandomDelegate == null)) {
                this.onEndCreateRandomDelegate = new EndOperationDelegate(this.OnEndCreateRandom);
            }
            if ((this.onCreateRandomCompletedDelegate == null)) {
                this.onCreateRandomCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreateRandomCompleted);
            }
            base.InvokeAsync(this.onBeginCreateRandomDelegate, new object[] {
                        uri}, this.onEndCreateRandomDelegate, this.onCreateRandomCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult mpost.WP7.PushServiceClient.WcfPushService.IPush.BeginJoinChannel(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginJoinChannel(clientInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool mpost.WP7.PushServiceClient.WcfPushService.IPush.EndJoinChannel(System.IAsyncResult result) {
            return base.Channel.EndJoinChannel(result);
        }
        
        private System.IAsyncResult OnBeginJoinChannel(object[] inValues, System.AsyncCallback callback, object asyncState) {
            mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo = ((mpost.WP7.PushServiceClient.WcfPushService.ClientInfo)(inValues[0]));
            return ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).BeginJoinChannel(clientInfo, callback, asyncState);
        }
        
        private object[] OnEndJoinChannel(System.IAsyncResult result) {
            bool retVal = ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).EndJoinChannel(result);
            return new object[] {
                    retVal};
        }
        
        private void OnJoinChannelCompleted(object state) {
            if ((this.JoinChannelCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.JoinChannelCompleted(this, new JoinChannelCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void JoinChannelAsync(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo) {
            this.JoinChannelAsync(clientInfo, null);
        }
        
        public void JoinChannelAsync(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, object userState) {
            if ((this.onBeginJoinChannelDelegate == null)) {
                this.onBeginJoinChannelDelegate = new BeginOperationDelegate(this.OnBeginJoinChannel);
            }
            if ((this.onEndJoinChannelDelegate == null)) {
                this.onEndJoinChannelDelegate = new EndOperationDelegate(this.OnEndJoinChannel);
            }
            if ((this.onJoinChannelCompletedDelegate == null)) {
                this.onJoinChannelCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnJoinChannelCompleted);
            }
            base.InvokeAsync(this.onBeginJoinChannelDelegate, new object[] {
                        clientInfo}, this.onEndJoinChannelDelegate, this.onJoinChannelCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult mpost.WP7.PushServiceClient.WcfPushService.IPush.BeginSendMessage(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, string msg, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSendMessage(clientInfo, msg, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool mpost.WP7.PushServiceClient.WcfPushService.IPush.EndSendMessage(System.IAsyncResult result) {
            return base.Channel.EndSendMessage(result);
        }
        
        private System.IAsyncResult OnBeginSendMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo = ((mpost.WP7.PushServiceClient.WcfPushService.ClientInfo)(inValues[0]));
            string msg = ((string)(inValues[1]));
            return ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).BeginSendMessage(clientInfo, msg, callback, asyncState);
        }
        
        private object[] OnEndSendMessage(System.IAsyncResult result) {
            bool retVal = ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).EndSendMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSendMessageCompleted(object state) {
            if ((this.SendMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SendMessageCompleted(this, new SendMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SendMessageAsync(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, string msg) {
            this.SendMessageAsync(clientInfo, msg, null);
        }
        
        public void SendMessageAsync(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, string msg, object userState) {
            if ((this.onBeginSendMessageDelegate == null)) {
                this.onBeginSendMessageDelegate = new BeginOperationDelegate(this.OnBeginSendMessage);
            }
            if ((this.onEndSendMessageDelegate == null)) {
                this.onEndSendMessageDelegate = new EndOperationDelegate(this.OnEndSendMessage);
            }
            if ((this.onSendMessageCompletedDelegate == null)) {
                this.onSendMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSendMessageCompleted);
            }
            base.InvokeAsync(this.onBeginSendMessageDelegate, new object[] {
                        clientInfo,
                        msg}, this.onEndSendMessageDelegate, this.onSendMessageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult mpost.WP7.PushServiceClient.WcfPushService.IPush.BeginGetLastMessages(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLastMessages(clientInfo, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<string> mpost.WP7.PushServiceClient.WcfPushService.IPush.EndGetLastMessages(System.IAsyncResult result) {
            return base.Channel.EndGetLastMessages(result);
        }
        
        private System.IAsyncResult OnBeginGetLastMessages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo = ((mpost.WP7.PushServiceClient.WcfPushService.ClientInfo)(inValues[0]));
            return ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).BeginGetLastMessages(clientInfo, callback, asyncState);
        }
        
        private object[] OnEndGetLastMessages(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<string> retVal = ((mpost.WP7.PushServiceClient.WcfPushService.IPush)(this)).EndGetLastMessages(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLastMessagesCompleted(object state) {
            if ((this.GetLastMessagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLastMessagesCompleted(this, new GetLastMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLastMessagesAsync(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo) {
            this.GetLastMessagesAsync(clientInfo, null);
        }
        
        public void GetLastMessagesAsync(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, object userState) {
            if ((this.onBeginGetLastMessagesDelegate == null)) {
                this.onBeginGetLastMessagesDelegate = new BeginOperationDelegate(this.OnBeginGetLastMessages);
            }
            if ((this.onEndGetLastMessagesDelegate == null)) {
                this.onEndGetLastMessagesDelegate = new EndOperationDelegate(this.OnEndGetLastMessages);
            }
            if ((this.onGetLastMessagesCompletedDelegate == null)) {
                this.onGetLastMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLastMessagesCompleted);
            }
            base.InvokeAsync(this.onBeginGetLastMessagesDelegate, new object[] {
                        clientInfo}, this.onEndGetLastMessagesDelegate, this.onGetLastMessagesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override mpost.WP7.PushServiceClient.WcfPushService.IPush CreateChannel() {
            return new PushClientChannel(this);
        }
        
        private class PushClientChannel : ChannelBase<mpost.WP7.PushServiceClient.WcfPushService.IPush>, mpost.WP7.PushServiceClient.WcfPushService.IPush {
            
            public PushClientChannel(System.ServiceModel.ClientBase<mpost.WP7.PushServiceClient.WcfPushService.IPush> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginPing(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Ping", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndPing(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("Ping", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginTest(string uri, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = uri;
                System.IAsyncResult _result = base.BeginInvoke("Test", _args, callback, asyncState);
                return _result;
            }
            
            public void EndTest(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Test", _args, result);
            }
            
            public System.IAsyncResult BeginConnect(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, string application, int type, bool availableRandom, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = clientInfo;
                _args[1] = application;
                _args[2] = type;
                _args[3] = availableRandom;
                System.IAsyncResult _result = base.BeginInvoke("Connect", _args, callback, asyncState);
                return _result;
            }
            
            public void EndConnect(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Connect", _args, result);
            }
            
            public System.IAsyncResult BeginDisconnect(string uri, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = uri;
                System.IAsyncResult _result = base.BeginInvoke("Disconnect", _args, callback, asyncState);
                return _result;
            }
            
            public void EndDisconnect(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("Disconnect", _args, result);
            }
            
            public System.IAsyncResult BeginCreateRandom(string uri, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = uri;
                System.IAsyncResult _result = base.BeginInvoke("CreateRandom", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndCreateRandom(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("CreateRandom", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginJoinChannel(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = clientInfo;
                System.IAsyncResult _result = base.BeginInvoke("JoinChannel", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndJoinChannel(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("JoinChannel", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSendMessage(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, string msg, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = clientInfo;
                _args[1] = msg;
                System.IAsyncResult _result = base.BeginInvoke("SendMessage", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndSendMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("SendMessage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLastMessages(mpost.WP7.PushServiceClient.WcfPushService.ClientInfo clientInfo, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = clientInfo;
                System.IAsyncResult _result = base.BeginInvoke("GetLastMessages", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<string> EndGetLastMessages(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<string> _result = ((System.Collections.ObjectModel.ObservableCollection<string>)(base.EndInvoke("GetLastMessages", _args, result)));
                return _result;
            }
        }
    }
}
